// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: company.proto

package alpha_pos_system_company_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PosCompanyServiceClient is the client API for PosCompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PosCompanyServiceClient interface {
	CreatePosCompany(ctx context.Context, in *CreatePosCompanyRequest, opts ...grpc.CallOption) (*CreatePosCompanyResponse, error)
	ReadPosCompany(ctx context.Context, in *ReadPosCompanyRequest, opts ...grpc.CallOption) (*ReadPosCompanyResponse, error)
	UpdatePosCompany(ctx context.Context, in *UpdatePosCompanyRequest, opts ...grpc.CallOption) (*UpdatePosCompanyResponse, error)
	DeletePosCompany(ctx context.Context, in *DeletePosCompanyRequest, opts ...grpc.CallOption) (*DeletePosCompanyResponse, error)
	ReadAllPosCompanies(ctx context.Context, in *ReadAllPosCompaniesRequest, opts ...grpc.CallOption) (*ReadAllPosCompaniesResponse, error)
}

type posCompanyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPosCompanyServiceClient(cc grpc.ClientConnInterface) PosCompanyServiceClient {
	return &posCompanyServiceClient{cc}
}

func (c *posCompanyServiceClient) CreatePosCompany(ctx context.Context, in *CreatePosCompanyRequest, opts ...grpc.CallOption) (*CreatePosCompanyResponse, error) {
	out := new(CreatePosCompanyResponse)
	err := c.cc.Invoke(ctx, "/pos.PosCompanyService/CreatePosCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCompanyServiceClient) ReadPosCompany(ctx context.Context, in *ReadPosCompanyRequest, opts ...grpc.CallOption) (*ReadPosCompanyResponse, error) {
	out := new(ReadPosCompanyResponse)
	err := c.cc.Invoke(ctx, "/pos.PosCompanyService/ReadPosCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCompanyServiceClient) UpdatePosCompany(ctx context.Context, in *UpdatePosCompanyRequest, opts ...grpc.CallOption) (*UpdatePosCompanyResponse, error) {
	out := new(UpdatePosCompanyResponse)
	err := c.cc.Invoke(ctx, "/pos.PosCompanyService/UpdatePosCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCompanyServiceClient) DeletePosCompany(ctx context.Context, in *DeletePosCompanyRequest, opts ...grpc.CallOption) (*DeletePosCompanyResponse, error) {
	out := new(DeletePosCompanyResponse)
	err := c.cc.Invoke(ctx, "/pos.PosCompanyService/DeletePosCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *posCompanyServiceClient) ReadAllPosCompanies(ctx context.Context, in *ReadAllPosCompaniesRequest, opts ...grpc.CallOption) (*ReadAllPosCompaniesResponse, error) {
	out := new(ReadAllPosCompaniesResponse)
	err := c.cc.Invoke(ctx, "/pos.PosCompanyService/ReadAllPosCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PosCompanyServiceServer is the server API for PosCompanyService service.
// All implementations must embed UnimplementedPosCompanyServiceServer
// for forward compatibility
type PosCompanyServiceServer interface {
	CreatePosCompany(context.Context, *CreatePosCompanyRequest) (*CreatePosCompanyResponse, error)
	ReadPosCompany(context.Context, *ReadPosCompanyRequest) (*ReadPosCompanyResponse, error)
	UpdatePosCompany(context.Context, *UpdatePosCompanyRequest) (*UpdatePosCompanyResponse, error)
	DeletePosCompany(context.Context, *DeletePosCompanyRequest) (*DeletePosCompanyResponse, error)
	ReadAllPosCompanies(context.Context, *ReadAllPosCompaniesRequest) (*ReadAllPosCompaniesResponse, error)
	mustEmbedUnimplementedPosCompanyServiceServer()
}

// UnimplementedPosCompanyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPosCompanyServiceServer struct {
}

func (UnimplementedPosCompanyServiceServer) CreatePosCompany(context.Context, *CreatePosCompanyRequest) (*CreatePosCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosCompany not implemented")
}
func (UnimplementedPosCompanyServiceServer) ReadPosCompany(context.Context, *ReadPosCompanyRequest) (*ReadPosCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPosCompany not implemented")
}
func (UnimplementedPosCompanyServiceServer) UpdatePosCompany(context.Context, *UpdatePosCompanyRequest) (*UpdatePosCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosCompany not implemented")
}
func (UnimplementedPosCompanyServiceServer) DeletePosCompany(context.Context, *DeletePosCompanyRequest) (*DeletePosCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosCompany not implemented")
}
func (UnimplementedPosCompanyServiceServer) ReadAllPosCompanies(context.Context, *ReadAllPosCompaniesRequest) (*ReadAllPosCompaniesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllPosCompanies not implemented")
}
func (UnimplementedPosCompanyServiceServer) mustEmbedUnimplementedPosCompanyServiceServer() {}

// UnsafePosCompanyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PosCompanyServiceServer will
// result in compilation errors.
type UnsafePosCompanyServiceServer interface {
	mustEmbedUnimplementedPosCompanyServiceServer()
}

func RegisterPosCompanyServiceServer(s grpc.ServiceRegistrar, srv PosCompanyServiceServer) {
	s.RegisterService(&PosCompanyService_ServiceDesc, srv)
}

func _PosCompanyService_CreatePosCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCompanyServiceServer).CreatePosCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosCompanyService/CreatePosCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCompanyServiceServer).CreatePosCompany(ctx, req.(*CreatePosCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCompanyService_ReadPosCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPosCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCompanyServiceServer).ReadPosCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosCompanyService/ReadPosCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCompanyServiceServer).ReadPosCompany(ctx, req.(*ReadPosCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCompanyService_UpdatePosCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCompanyServiceServer).UpdatePosCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosCompanyService/UpdatePosCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCompanyServiceServer).UpdatePosCompany(ctx, req.(*UpdatePosCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCompanyService_DeletePosCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCompanyServiceServer).DeletePosCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosCompanyService/DeletePosCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCompanyServiceServer).DeletePosCompany(ctx, req.(*DeletePosCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PosCompanyService_ReadAllPosCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllPosCompaniesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PosCompanyServiceServer).ReadAllPosCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.PosCompanyService/ReadAllPosCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PosCompanyServiceServer).ReadAllPosCompanies(ctx, req.(*ReadAllPosCompaniesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PosCompanyService_ServiceDesc is the grpc.ServiceDesc for PosCompanyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PosCompanyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.PosCompanyService",
	HandlerType: (*PosCompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePosCompany",
			Handler:    _PosCompanyService_CreatePosCompany_Handler,
		},
		{
			MethodName: "ReadPosCompany",
			Handler:    _PosCompanyService_ReadPosCompany_Handler,
		},
		{
			MethodName: "UpdatePosCompany",
			Handler:    _PosCompanyService_UpdatePosCompany_Handler,
		},
		{
			MethodName: "DeletePosCompany",
			Handler:    _PosCompanyService_DeletePosCompany_Handler,
		},
		{
			MethodName: "ReadAllPosCompanies",
			Handler:    _PosCompanyService_ReadAllPosCompanies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company.proto",
}
